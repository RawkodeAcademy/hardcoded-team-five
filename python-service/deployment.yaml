apiVersion: v1
kind: Service
metadata:
  name: python-service
  namespace: team-five
  labels:
    app: python-service
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8085
      protocol: TCP
      name: http
  selector:
    app: python-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-service
  namespace: team-five
  labels:
    app: python-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: python-service
  template:
    metadata:
      labels:
        app: python-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8085"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: python-service
        image: python:3.11-slim
        command: ["/bin/bash", "-c"]
        args:
          - |
            set -e
            pip install --no-cache-dir flask==3.0.0 prometheus-client==0.19.0 gunicorn==21.2.0
            cat > /app/app.py << 'EOFAPP'
            from flask import Flask, request, jsonify
            from prometheus_client import Counter, generate_latest

            app = Flask(__name__)
            request_counter = Counter('python_requests_total', 'Total requests processed')

            @app.route('/healthz', methods=['GET'])
            def health():
                return jsonify({"ok": True}), 200

            @app.route('/metrics', methods=['GET'])
            def metrics():
                metrics_output = generate_latest()
                return metrics_output, 200, {'Content-Type': 'text/plain; charset=utf-8'}

            @app.route('/op', methods=['POST'])
            def op():
                request_counter.inc()
                try:
                    data = request.get_json()
                    if not data or 'text' not in data or not isinstance(data['text'], str):
                        return jsonify({"key": "unique_words", "value": 0, "cache_hit": False}), 200
                    text = data['text']
                    words = text.split()
                    unique_count = len(set(words))
                    return jsonify({"key": "unique_words", "value": unique_count, "cache_hit": False}), 200
                except Exception:
                    return jsonify({"key": "unique_words", "value": 0, "cache_hit": False}), 200

            if __name__ == '__main__':
                app.run(host='0.0.0.0', port=8085)
            EOFAPP
            exec gunicorn --bind 0.0.0.0:8085 --workers 2 --threads 2 --timeout 60 --chdir /app app:app
        workingDir: /app
        ports:
        - containerPort: 8085
          name: http
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8085
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8085
          initialDelaySeconds: 20
          periodSeconds: 5
          failureThreshold: 5
